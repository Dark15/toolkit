import { html } from '@codemirror/lang-html'
import { javascript } from '@codemirror/lang-javascript'
import { StreamLanguage } from '@codemirror/language'
import { css } from '@codemirror/legacy-modes/mode/css'
import { EditorView } from '@codemirror/view'
import {
  Box,
  Button,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack
} from '@mui/material'
import CodeMirror from '@uiw/react-codemirror'
import { minify as CSSMinify } from 'csso'
import { useState } from 'react'
import { minify as JSMinify, MinifyOptions } from 'terser'

import * as Snippets from './codeSnippets'
const HTMLMinify = require('html-minifier').minify

const HTMLOptions = {
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
  collapseWhitespace: true,
  collapseInlineTagWhitespace: true,
  minifyCSS: { level: { 2: { all: true } } },
  minifyJS: { toplevel: true }
}

const JSOptions: MinifyOptions = {
  toplevel: true
}

function CodeCompress() {
  const [code, setCode] = useState(Snippets.html)
  const [lang, setLang] = useState('html')
  const handleChange = (e: SelectChangeEvent) => {
    setLang(e.target.value)
    setCode((Snippets as any)[e.target.value])
  }
  const onCompress = async () => {
    switch (lang) {
      case 'html':
        setCode(HTMLMinify(code, HTMLOptions))
        break
      case 'css':
        setCode(CSSMinify(code).css)
        break
      case 'javascript':
        setCode((await JSMinify(code, JSOptions)).code as string)
        break
      default:
        break
    }
  }
  return (
    <Box component="form">
      <Stack spacing={3} direction="row" mb={2} alignItems="center">
        <Button variant="contained" onClick={onCompress}>
          压缩
        </Button>
        <FormControl variant="standard" sx={{ minWidth: 120 }}>
          <InputLabel>语言</InputLabel>
          <Select value={lang} onChange={handleChange}>
            <MenuItem value="html">HTML</MenuItem>
            <MenuItem value="css">CSS</MenuItem>
            <MenuItem value="javascript">JavaScript</MenuItem>
          </Select>
        </FormControl>
      </Stack>
      <div className="h-75vh shadow-xl shadow-blue-100">
        <CodeMirror
          value={code}
          className="h-full"
          height="100%"
          extensions={[
            javascript({ jsx: true, typescript: true }),
            StreamLanguage.define(css),
            html(),
            EditorView.lineWrapping
          ]}
          onChange={(value) => {
            setCode(value)
          }}
        />
      </div>
    </Box>
  )
}

export default CodeCompress
